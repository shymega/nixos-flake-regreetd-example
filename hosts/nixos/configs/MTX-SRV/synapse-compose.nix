# Auto-generated using compose2nix v0.2.2-pre.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = true;
    defaultNetwork.settings = {
      # Required for container networking to be able to use names.
      dns_enabled = true;
    };
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."synapse-postgres" = {
    image = "postgres:latest";
    environment = {
      "POSTGRES_DB" = "synapse";
      "POSTGRES_PASSWORD" = "STRONGPASSWORD";
      "POSTGRES_USER" = "synapse";
    };
    volumes = [
      "/etc/nixos/postgres:/var/lib/postgresql/data:rw"
    ];
    log-driver = "journald";
    extraOptions = [
      "--ip=10.10.10.2"
      "--network-alias=postgres"
      "--network=default"
    ];
  };
  systemd.services."docker-synapse-postgres" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
    };
    partOf = [
      "docker-compose-synapse-root.target"
    ];
    wantedBy = [
      "docker-compose-synapse-root.target"
    ];
  };
  virtualisation.oci-containers.containers."synapse-synapse" = {
    image = "matrixdotorg/synapse:latest";
    volumes = [
      "/etc/nixos/synapse:/data:rw"
    ];
    log-driver = "journald";
    extraOptions = [
      "--ip=10.10.10.4"
      "--network-alias=synapse"
      "--network=default"
    ];
  };
  systemd.services."docker-synapse-synapse" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
    };
    partOf = [
      "docker-compose-synapse-root.target"
    ];
    wantedBy = [
      "docker-compose-synapse-root.target"
    ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-synapse-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}

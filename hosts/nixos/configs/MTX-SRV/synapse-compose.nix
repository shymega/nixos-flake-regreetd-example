# Auto-generated using compose2nix v0.2.2-pre.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = true;
    defaultNetwork.settings = {
      # Required for container networking to be able to use names.
      dns_enabled = true;
    };
  };
  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."synapse-db" = {
    image = "docker.io/postgres:alpine";
    environment = {
      "POSTGRES_INITDB_ARGS" = "--encoding=UTF-8 --lc-collate=C --lc-ctype=C";
      "POSTGRES_PASSWORD" = "changeme";
      "POSTGRES_USER" = "synapse";
    };
    volumes = [
      "/srv/containers/matrix/db:/var/lib/postgresql/data:rw"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=db"
      "--network=synapse_default"
    ];
  };
  systemd.services."podman-synapse-db" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "no";
    };
    after = [
      "podman-network-synapse_default.service"
    ];
    requires = [
      "podman-network-synapse_default.service"
    ];
    partOf = [
      "podman-compose-synapse-root.target"
    ];
    wantedBy = [
      "podman-compose-synapse-root.target"
    ];
  };
  virtualisation.oci-containers.containers."synapse-synapse" = {
    image = "docker.io/matrixdotorg/synapse:latest";
    environment = {
      "SYNAPSE_CONFIG_PATH" = "/data/homeserver.yaml";
    };
    volumes = [
      "/srv/containers/matrix/synapse:/data:rw"
    ];
    ports = [
      "8448:8448/tcp"
    ];
    dependsOn = [
      "synapse-db"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=synapse"
      "--network=synapse_default"
    ];
  };
  systemd.services."podman-synapse-synapse" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
    };
    after = [
      "podman-network-synapse_default.service"
    ];
    requires = [
      "podman-network-synapse_default.service"
    ];
    partOf = [
      "podman-compose-synapse-root.target"
    ];
    wantedBy = [
      "podman-compose-synapse-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-synapse_default" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f synapse_default";
    };
    script = ''
      podman network inspect synapse_default || podman network create synapse_default
    '';
    partOf = [ "podman-compose-synapse-root.target" ];
    wantedBy = [ "podman-compose-synapse-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-synapse-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}

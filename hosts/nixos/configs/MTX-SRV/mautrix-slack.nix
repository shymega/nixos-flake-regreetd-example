# Auto-generated using compose2nix v0.2.3-pre.
{ pkgs, lib, ... }:

{
  virtualisation = {
    containers.enable = true;
    # Runtime
    docker = {
      enable = true;
      autoPrune.enable = true;
    };
    oci-containers.backend = "docker";

    # Containers
    oci-containers.containers."mautrix-slack" = {
      image = "dock.mau.dev/mautrix/slack:latest";
      volumes = [
        "/srv/containers/mautrix-slack:/data:rw"
      ];
      ports = [
        "29335:29335/tcp"
      ];
      log-driver = "journald";
      extraOptions = [
        "--network-alias=mautrix-slack"
        "--network=mautrix-slack_default"
        "--add-host=mtx.shymega.org.uk:95.216.172.104"
        "--dns=1.0.0.1"
      ];
    };
  };
  systemd = {
    services = {
      "docker-mautrix-slack" = {
        serviceConfig = {
          Restart = lib.mkOverride 500 "always";
        };
        after = [
          "docker-network-mautrix-slack_default.service"
        ];
        requires = [
          "docker-network-mautrix-slack_default.service"
        ];
        partOf = [
          "docker-compose-mautrix-slack-root.target"
        ];
        wantedBy = [
          "docker-compose-mautrix-slack-root.target"
        ];
      };

      # Networks
      "docker-network-mautrix-slack_default" = {
        path = [ pkgs.docker ];
        serviceConfig = {
          Type = "oneshot";
          RemainAfterExit = true;
          ExecStop = "docker network rm -f mautrix-slack_default";
        };
        script = ''
          docker network inspect mautrix-slack_default || docker network create mautrix-slack_default
        '';
        partOf = [ "docker-compose-mautrix-slack-root.target" ];
        wantedBy = [ "docker-compose-mautrix-slack-root.target" ];
      };
    };

    # Root service
    # When started, this will automatically create all resources and start
    # the containers. When stopped, this will teardown all resources.
    targets."docker-compose-mautrix-slack-root" = {
      unitConfig = {
        Description = "Root target generated by compose2nix.";
      };
      wantedBy = [ "multi-user.target" ];
    };
  };
}
